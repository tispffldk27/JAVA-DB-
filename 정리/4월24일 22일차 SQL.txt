SQL : 데이터 베이스를 관리하기 위한 언어
DDL(Data Definition Language): 데이터 정의어 , 데이터 베이스를 생성하거나
			   데이터베이스 객체들을 생성,수정,삭제 하기 위해 사용하는 명령어
				학생 테이블, 과목 테이블 , 교수 테이블 등을 새엇ㅇ
DML(Data Manipulation Language): 데이터 조작어,데이터를 관리하기 위해 데이터검색,추가,삭제 수정하기위해
				사용하는 명령어
				학생1정보 추가,학생 1정보 수정, 학생 1 정보 검색 등...

CRUD : create, read, update  delete
          insert , select, update ,delete



기본키 : 테이블 내에서 고유한 값을 가지며 기본키는 중복될 수 없고 NULL값을 가질수 없다.
	객체를 식별할 수 있는 고유 값

select 속성명 : from 테이블명 [where 조건] [order by asc|desc]     asc 내림순 desc오름차순
select의 속성명     :결과에서 보여줄 속성들을 나열한다.
from 테이블명      : 해당 테이블에서 검색을 한다.
where 조건         :

SELECT * FROM university.student;                 <<출력문 sysout과 비슷
university 데이터베이스에 있는 student 테이블에서 모든 객체(where이 없는경우)
		의 모든 속성을 보여준다.

insert into 테이블명(컬럼1,컬럼2,컬럼...컬럼n)      <<저장하는법??아니 일단

	values(컬럽값1 ,컬럼값2,....컬럼값n);


insert시 고려해야할 사항들
1.기본키 속성을 꼭 넣어줘야 한다   => 기본키는 NULL값을 가질수 없기 때문에 
2.기본키가 중복되면 안된다.          => 기본키는 고유 식별자이기 때문에 중복되면 고유 식별자가 아니라서
3.각 속성의 제약 사항을 맞춰줘야한다   =>최대 10자이면 10자보다 작거나 같게 입력해야한다 .
4. 각 속성의 자료형에 맞게 값들을 입력해야한다.
4.id는 최대 10자인데 11자이상을 입력자로 안된다



select * from university.student where name = '논개';
위의 코드를 실행했을 경우 나올수 있는 값의 갯수는 
(학생정보가 여러개 입력된상황)??  3번!
1. 1개
2. 0개또는 1개( 조건에서 비교하는 속성이 기본키일 경우)
3. 0개 또는 여러개(기본키가 아닌 속성인경우)
4 .여러개

select문의 결과에 중복된 값이 있을경우 distinct를 이용하여 중복을 제거 할 수 있다.
select distinct 속성명,....  from 데이터베이스.테이블

distinct는 속성명들이 기본키값이 없을 경우에 쓸수 있고 기본키가
 포함되어 있는경우 쓸 필요가 없다.
 =>기본키값에 의해 중복될 수 없기 때문에

정렬:order by 속성명 asc   혹은 desc;
order by절이 없으면 기본적으로 order by 기본키 asc가 적용된다

and : where 절에서 조건이 2개이상인 경우 사용하고  ~고의 의미를 가지며
	둘다 참인 경우에 사용 
 where major ='컴퓨터' and gender = '여';			

or : 하나 만 참이여두 되는경우 사용
  where grade = 4 or gender = '여';

not:  반대
 where not gender = '여';

<>   : 같지않다     != 랑 똑같음

like :  검색할때 좋음 .. %뒤에 관련된거 다나옴 유%하면 관순입력안해도 다나옴.
 where  name like '유관%';                  %유%  <<이렇게하면 '유'에관한 단어 다나옴

select 속성명 from 테이블명 [where 조건]

select * from university.student2 order by grade asc, age asc;
낮은 학년순으로 정렬한 후에 같은 학년에서도 다시 나이 순으로 정렬하는 쿼리문


update 테이블명
	set 속성1= 값1, 속성2 =값2..
	where 조건;    //조건에는 기본키를 이용한 조건이 반드시 들어가야한다.

delete from 테이블명 where 조건;




count(*) : 검색 결과의 갯수를 알려주는 함수
sum() :합
avg() : 평균
min() : 최솟값
max() : 최대값




select문에서 조건절에서 사용하는연산자
=>같다,      !=  , <> (같지않다     <,  > ,  <=   ,>=

AND, OR ,NOT
like : 문자열에서 원하는 문자열이 있는지 확인할때 사용
       보통 %를 이용하여 원하는 문자열이 있는지 검색한다.  
 
'%문자열1': 문자열 1로 끝나는 모든 문자열을 의미
'문자열2%': 문자열 2로 시작하는 모든 문자열을 의미
'%문자열3%' :문자열 3이 들어가 있는 모든 문자열

함수: count(*), count(속성명), sum(속성명) , avg(속성명 또는수식),
	min(속성명),max(속성명)










강의 테이블에는 과목 코드와 교수번호가 있는데
현재 강의 테이블을 기준으로 아래와 같이 출력되도록 sql문을 작성하세요




강의번호 교과코드 교수번호 강의실 일정 년도 학기

*/ on 다음에 나와야 하는 코드는 기준테이블.외래키명 = 참조테이블.기본키명 */

select *
 from
      class
	JOIN 
subject  on class.class_subject_code = subject.subject_code; 





