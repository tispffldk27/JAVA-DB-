1번째 수업시간에했던거?
2번쨰 클레스
3번째 쉽다

주관식


변수
 -변수를 선언하고 사용할수있는가
 - 자료형
 1. 논리형 : boolean => true 또는 false
 2. 정수형: byte ,short,int,long 정수
 3. 실수형: float ,double 실수
 4. 문자형: char 문자

 - 변수 이름 짓는규칙,관례
 1. 대소문자 구별
 2. 예약어(키워드)를 사용할 수없음
 3. 숫자로 시작할 수 없다
 4. 공백 불가
 5. 중복된 변수 선언이 불가
 6. 특수문자 _,$만 사용 가능
 - 변수 이름 짓는 관례
 1. 변수명을 의미있게
 2. 변수는 카멜표기법을 따르는게 좋다
 3. 자주 사용되는 단어들은 약어로 사용하는게좋다


연산자
 - 산술연산자(+,-,*,/,%)
 - / :0으로 나눌 수 없다 => 정수/정수 할 때 A
rithmeticException
 - 정수/ 정수 => 정수 =>소수점이 사라진다
 ==>자료형변환
- % : 나머지연산자, 0으로 나눌 수 없다
비교연산자(>=, <=, == , != ,< , > )
 - 대소 비교
 - true 또는 false ==>조건식
논리연산자(&& 그리고 ||또는 ! 아니다)
 - ~ 고 ~거나 ~아닌
 - true 또는 false ==>조건식

증감연산자
 - 무조건 하나 증가,감소
 - 구분해서

대입연산자
 - 비교연산자와 같다와 헷갈리지 말자

조건문 
 - 조건에 따라 다른 실행문을 작성할  수 있는가?
 - ~하면 - 해라
 - ~하면 ==>조건식  -해라 ==>실행문
 - if문 ,switch문

switch ( 변수또는 식){
case 값1 :  실행문1; break;
case 값2 :  실행문2; break;
default :   실행문3;
}
 - 사용되는 변수 또는 식의 값이 제한적일 때
 - break : switch문을 빠져나오는 기능
 - case 의 값으로 올 수 있는 자료형 : 정수, 문자 , 문자열
 - case 의 값은 상수

반복문
 - 규칙성 있게 반복하는 동작을 코드로 작성할 수 있는가?
 - 규칙성과, 반복횟수
 - for문 while , do while문

while(조건식){
	실행문;
}
어떤식으로 많이쓰이냐면
int t=3;
while(t-- >0){

}
 - 이중 반복문 : 복잡하다
 - 밖에있는 반복문이 1번 실행될 때 안에 있는 반복문이 여러번 실행된다
 - continue(스킵) : 만나면 for문의 증감연산, while문의 조건식
 - break : 만나면 반복문을  1개 빠져나간다.
 	=> break 가 포함된 if문을 감싸는 반복문을 빠져나감
 - 반복문은 조건문과 많이 쓰인다.

배열
 - 배열을 이용하여 자료들을 잘 관리 할 수 있는가?
 - 정렬, 최대값,최소값, 평균, 총점
 - 참조변수는 값을 가진 변수의 주소를 저장한다.
 -배열은 참조변수다
 -참조변수는 값(주소)를 가진 변수의 주소를 저장한다.

자료형 [] 배열명;
자료형 배열명[];
 - 배열명 = new 자료형[크기]
 - 배열크기 : 배열명.length     
for(int i=0 ; i< 배열명.length ; i++) {
}
for(int tmp:배열명){
}

클래스
 - 정보를 편하게 관리하기 위해서 클래스를 생성
 - 클래스 : 설계도
 - 객체(인스턴스) : 제품
 - 메소드 : 기능
 - 클래스 : 멤버변수 ,멤버 메소드

메소드
 - 하나의 특정 기능을 동작시키는 코드의 집합
 - 메소드 선언부와 구현부
 접근제한자(final) (static)리턴타입 메소드명(매개변수){}
 - void : 리턴타입 , 매개변수가 없을 때 사용 가능하고
	리턴타입은 생략 불가
 - 메소드 생성 과정
1. 기능을 상세히 정리
2. 기능을 통해 리턴타입과 매개변수를 설정
3. 메소드명 선정
4. 메소드 선언부 입력
5. 메소드 구현
 -메소드 오버로딩 : 한 클래스 내에 같은 이름의 메소드를 여러개 정의하는것
  1. 매개변수의 갯수가 다른경우
  2. 매개변수의 갯수가 같고 ,자료형이 다른경우

접근제한자
 - public >protected >default > private
 - public : 무제한
 - protected : 같은패키지 + 자식 + 나
 - default : 같은패키지 + 나
 - private : 나
 -일반적으로 멤버 변수의 접근제한자는 private , 멤버 메소드의 접근 제한자는 public
 - 클래스의 접근제한자를 public 으로 하려면 클래스명과 파일명이 똑같아야한다.

생성자
 -  객체를 생성할 때 호출되어 멤버 메소드를 초기화하는 기능

this
 - 내 클래스
 - 매개변수의 이름이 멤버 변수와 같아서 구분이 필요할 때 ★
 - 메소드명이 길어서 자동완성을 이용

변수의 초기화
 - 객체멤버 변수 :  기본값 > 명시적초기화 > 초기화 블록 >생성자
 -클래스 멤버변수: 기본값 > 명시적초기화 > 초기화 블록

상속 : 부모클래스에서 멤버 변수와 메소드를 물려 받는것
 - 클래스의 재사용을 높여서 코드의 중복을 줄이는 것
 - 클래스에서 상속은 단일 상속
 - Object : 모든 클래스의 조상
		Object 클래스의 자식 클래스들은 Object 클래스의 멤버 메소드를 사용할 수 있다.
 - 관계  : 포함(멤버 변수로 다른 클래스의 객체),상속
 - 상속: is a 관계 , A 는 B이다가 성립하면 B:부모 , A자식
 - 포함:has a관계 A는 B를 포함하고 있다. A클래스 B멤버
 - 상속을 받아도 부모 클래스 private 멤버들은 사용할 수 없다.


오버라이딩
 - 부모 클래스에서 물려받은 메소드를 재정의하는 것
 - 오버라이딩은 부모클래스에 있는 메소드와 리턴타입,메소드명, 매개변수가 정확히 일치해야 한다.
 - 오버로딩(여러개)vs 오버라이딩(덮어쓴것)

super 
 -부모를 나타내고
 -super() : 부모클래스의 생성자


static
 - 클래스 멤버 변수나 클래스 멤버 메소드를 생성할 때 사용
 - 클래스 멤버들은 클래스를 통해 사용한다
 =>개체를 생성하지 않고 사용한다.
 =>하지만 객체를 통해 사용할수는 있다.

매개변수의 다형성
 - product , computer ,audio 예제
 -메소드 매개변수에 다양한 클래스의 객체가 오는데
  이 객체들의 부모가 같다면 매개변수를 각각의 클래스로 하지않고 부모 클래스의
  객체를 이용하는 것

추상 메소드
 - 메소드의 구현부 없이 선언부만 있어서 구현을 자식 클래스에게 맡기는 메소드

추상 클레스
 - 추상 메소드가 1개이상 있는 클래스

인터페이스
 - 추상 메소드와 클레스 멤버 상수로만 이루어져 있는 것
   + 디폴트 메소드
 - 기능 요약
 - 인터페이스에서 상속은 다중상속이다.
 - 인터페이스는 구현을 통해 클래스를 만들고, 만들어진 클래스를 통해 사용된다
 - 디폴트 메소드: 인터페이스에 새로운 기능을 추가하면 해당 인터페이스를 구현한 모든 클래스에
                      메소드 오버라이딩을 해야하기 때문에 불필요한 문제가 생길 수 있다.

예외처리
 - 프로그램의 안정화를 위해
 - 예외는 코드상에서 보완이 가능
 - 에러는 코드상에서 보완이 불가

try{
	//예외가 발생할수 있는 코드
}catch(예외클래스){
	//예외가 발생 했을때 실행할 코드
}catch(Exception e){

}finally{   //예외가 발생해도 실행되고 발생안되도 실행됨

}throw =>메소드
 - 메소드에서 예외가 발생했을 때 안에서 처리하지 않고 
  밖에서 처리하도록 하기 위해 사용
 - 예외가 발생하면 throw new 예외객체(); 를 통해 예외를 던져준다
 - throw가 있는 메소드는 메소드 선언부에 throws를 통해 어떠한 예외가 발생할 수 있는지
   명시해주어야 한다.
 - 다만 RuntimeException 예외 클래스들은 명시하지 않아도 됨


toString()
 -문자열이 필요한 부분에 객체를 넘겨주면 해당 객체의 
  toString 메소드가 자동으로 호출된다

String 클래스

래퍼 클래스
 - 일반 자료형을 클래스로 만든 것
 - 래퍼 클래스는 각 자료형에 대한 값 + null
 - 문자열을 다른 자료형으로 바꾸는 방법
   Integer.parselnt(문자열);
   Float.paresFloat(문자열);





 